Vuex

	-> state management.

	-> npm install --save vuex

	Vue.use(Vuex);

	export const store = new Vuex.Store({
		state:  {            -> the name should be state.
			counter: 0
		}
	});


	-> pass the store in the vue instance.


To access the store

	in the method
		
		export default {
			computed: {
				counter() {
					return this.$store.state.counter * 2;					
				}
			}
			
		}

		this.$store.state.counter++;


	instead of directly accessing the state we can use getter, so that we can reduce the code repitition.




use getters

	export const store = new Vuex.Store({
		state:  {            -> the name should be state.
			counter: 0
		},

		getters: {
			doubleCounter : state => {
				return state.counter * 2;
			}
		}
	});



	export default {
		computed: {
			counter() {
				return this.$store.getters.doubleCounter;					
			}
		}
			
	}



mapping getter to properties

	export default {
		computed: {
			counter() {
				return this.$store.getters.doubleCounter;					
			},

			click() {
				return this.$store.getters.stringCounter;					
			}
		}
			
	}

	if the component has multiple getters like this we need to call individual getters, so


	import { mapGetters } from 'vuex';

	export default {
		computed: mapGetters([
			'doubleCounter',
			'stringCounter'
		]);   -----> here can pass as obj instead of array.			
	}


create our own computed methods

	export default {
		computed: {
			...mapGetters([
				'doubleCounter',
				'stringCounter'
			]),
			ownMethod() {}
		}
	}

	npm install --save-dev babel-preset-satge-2  ---> transpiler, if es6 is not working.




understanding mutations

	mutations ---> like setters

		it mutates the state.


	export const store = new Vuex.Store({
		state:  {            -> the name should be state.
			counter: 0
		},

		getters: {
			doubleCounter : state => {
				return state.counter * 2;
			}
		},

		mutations: {
			increment: state => {
				state.counter++;
			}
		}
	});


	use mutations

		export default {
			methods: {
				increment() {
					this.$store.commit('increment')  ----> this name is as specified in the store
				},
				decrement() {}
			}
		}

		-> here we are again repeating the code.


	map mutations

	import { mapMutations } from 'vuex';

	export default {
		methods: {
			...mapMutations([
				'increment',
				'decrement'
			]) 
		}
	}


why mutations runs synchronously

	-> if it is synchronous, it is harder to track which mutation changes what.

	For async task we can use actions instead of using mutations in the component.

	

		